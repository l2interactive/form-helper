{"version":3,"file":null,"sources":["../src/formhelper.js"],"sourcesContent":["/**\n * Object used to define actions FormHelper will take upon form submission and\n * XHR lifecycle\n *\n * @typedef {Object} FormRule\n * @namespace FormRule\n *\n * @property {String} form - Form CSS selector string\n *\n * @property {String} [action] - Where to post the XHR request. If ommitted,\n * will use the form's 'action' attribute value\n *\n * @property {Object} [xhrOptions] - Custom XHR options to use. See [jQuery documentation]{@link http://api.jquery.com/jQuery.ajax/#jQuery-ajax-settings}\n * for full list of options\n *\n * @property {Object} [data] - Additional post data. Useful for defaults or\n * 'always args'<br><br>\n *\n * Note the order order in which data is merged (later items take\n * precedence):\n * <ol>\n *   <li>formHelper.FormHelperRequest.Defaults.xhrOptions.data\n *   <li>rule.xhrOptions.data\n *   <li>rule.data\n *   <li>serialized form data\n * </ol>\n *\n * @property {Boolean} [isMultiForm] - Modify [$form]{@link formHelper.FormHelperRequest#$form}\n * to be the set of all matched {@link FormRule.form} elements as opposed to the\n * single submitted form, i.e. treat multiple forms as one single big form\n *\n * @property {Boolean} [disableControls] - Automatically disable form controls\n * during submit\n *\n * @property {Boolean} [scrollIntoViewOnUIUpdate] - Automatically scroll the form\n * into view (if it isn't already) if response caused us to modify the DOM\n *\n * @property {Boolean} [focusFirstErroredControl] - Automatically focuses\n * the first errored control\n *\n * @property {Boolean} [blankAllPasswordsOnSubmit] - Automatically call\n * [blankAllPasswordFields]{@link formHelper.FormHelperRequest#blankAllPasswordFields} on submit\n *\n * @property {Boolean} [releaseFormAndUpdateUIOnXHRSuccess] - Automatically call\n * [releaseForm]{@link formHelper.FormHelperRequestController#releaseForm} and\n * [updateUI]{@link formHelper.FormHelperRequestController#updateUI} after\n * [xhrSuccess]{@link formHelper.FormHelperRequestController#xhrSuccess}\n *\n * @property {FormRule.xhrReady} [xhrReady] - Callback fired when [xhrOptions]{@link formHelper.FormHelperRequest#xhrOptions}\n * has been created but before the actual jqXHR has been created. <b>The most\n * relevant non-StatusHandler callback</b>\n *\n * @property {FormRule.xhrBeforeSend} [xhrBeforeSend] - Callback fired during\n * the jqXHR beforeSend event:\n * <blockquote>\n * <b>[beforeSend]{@link http://api.jquery.com/Ajax_Events/}</b><br>\n * This event, which is triggered before an Ajax request is started, allows you\n * to modify the XMLHttpRequest object (setting additional headers, if need be.)\n * </blockquote>\n *\n * @property {FormRule.xhrSuccess} [xhrSuccess] - Callback fired during the\n * jqXHR success event:\n * <blockquote>\n * <b>[success]{@link http://api.jquery.com/Ajax_Events/}</b><br>\n * This event is only called if the request was successful (no errors from the\n * server, no errors with the data).\n * </blockquote>\n *\n * @property {FormRule.xhrComplete} [xhrComplete] - Callback fired during the\n * jqXHR complete event:\n * <blockquote>\n * <b>[complete]{@link http://api.jquery.com/Ajax_Events/}</b><br>\n * This event is called regardless of if the request was successful, or not. You\n * will always receive a complete callback, even for synchronous requests.\n * </blockquote>\n *\n * @property {FormRule.xhrError} [xhrError] - Callback fired during the jqXHR\n * error event:\n * <blockquote>\n * <b>[error]{@link http://api.jquery.com/Ajax_Events/}</b><br>\n * This event is only called if an error occurred with the request (you can\n * never have both an error and a success callback with a request).\n * </blockquote>\n *\n * @property {Function} [requestController] - Class to instantiate to handle\n * FormRule execution. Defaults to [FormHelperRequest]{@link formHelper.FormHelperRequest}\n *\n * @property {Function} [customSubmitHandler] - Prevents FormHelper from creating\n * a [FormHelperRequest]{@link formHelper.FormHelperRequest} on submit and calls\n * this function instead.\n *\n * @property {Function} [onComplete] - Callback fired after when FormHelperRequest\n * is complete.\n *\n * @property {Object.<String, FormRule.StatusHandler>} [status]\n * Object with keys matching {@link FormHelperResponse} status codes and their\n * accompanying StatusHandlers. Only the StatusHandler registered for the\n * returned status code will be invoked\n *\n * @example\n * {\n *   form: '#form-login',\n *   action: '/h/module/loginForm',\n *\n *   xhrOptions: {\n *     type: 'POST', // Default value\n *     data: {\n *       foo: 'bar'\n *     }\n *   },\n *\n *   data: {\n *     foo: 'bar',\n *     baz: 'qux'\n *   },\n *\n *   xhrReady: function(xhrOptions) {\n *     // Everything is prepared, about to create jqXHR\n *   },\n *   xhrBeforeSend: function(jqXHR, settings) {\n *     // jqXHR instantiated, about to make the request\n *   },\n *   xhrSuccess: function(data, textStatus, jqXHR) {\n *     // Response received, all good.\n *   },\n *   xhrError: function(jqXHR, textStatus, errorThrown) {\n *     // Something went wrong...\n *   },\n *   xhrComplete: function(jqXHR, textStatus) {\n *     // jqXHR complete\n *   },\n *\n *   status: {\n *     SUCCESS: '/account', // Login successful, redirect user\n *     ERROR: function() {\n *       // Fired on a response status code of 'error'\n *       this.find('#fancy-error-message').show();\n *     }\n *   }\n * }\n *\n * @example\n * {\n *   form: '#form-sign-up',\n *   action: '/h/module/signup',\n *\n *   xhrReady: function(xhrOptions) {\n *    if (xhrOptions.data.accepts !== '1') {\n *      this.cancel();\n *      this.find('#message-accept-terms').show();\n *    }\n *   },\n *\n *   status: {\n *     SUCCESS: function() {\n *       this.$form.html(this.data);\n *     }\n *   }\n * }\n */\n\n/**\n * @typedef {(fn|String)} StatusHandler\n * @memberOf FormRule\n * @description\n * Handler for a given {@link FormHelperResponse} status. Can either be a\n * function or a string. If it's a function, it will be called in the context of\n * the [FormHelperRequest]{@link formHelper.FormHelperRequest} instance. If it's\n * a string, the browser will be forwarded to the given URL/path.\n * @example\n * // Update UI appropriately for this status code\n * function() {\n *   this.find(\"#update-success\").show();\n *   this.scrollToTopOfForm();\n * }\n * @example\n * // Forward the browser to '/account/main'\n * '/account/main'\n */\n\n/**\n * @callback xhrReady\n * @memberOf FormRule\n * @param  {Object} xhrOptions - Complete XHR options object\n */\n\n/**\n * @callback xhrBeforeSend\n * @memberOf FormRule\n * @param  {jqXHR} jqXHR - Prepared [jQuery XMLHttpRequest object]{@link http://api.jquery.com/jQuery.ajax/#jqXHR}\n * @param  {object} settings - jqXHR settings object\n */\n\n/**\n * @callback xhrComplete\n * @memberOf FormRule\n * @param  {jqXHR} jqXHR - [jQuery XMLHttpRequest object]{@link http://api.jquery.com/jQuery.ajax/#jqXHR}\n * @param  {String} textStatus jQuery request status\n */\n\n/**\n * @callback xhrSuccess\n * @memberOf FormRule\n * @param  {object} data Response payload\n * @param  {String} textStatus jQuery request status\n * @param  {jqXHR} jqXHR - [jQuery XMLHttpRequest object]{@link http://api.jquery.com/jQuery.ajax/#jqXHR}\n */\n\n/**\n * @callback xhrError\n * @memberOf FormRule\n * @param  {jqXHR} jqXHR - [jQuery XMLHttpRequest object]{@link http://api.jquery.com/jQuery.ajax/#jqXHR}\n * @param  {String} textStatus jQuery request status\n * @param  {String} errorThrown HTTP status â€“ 'Not Found', 'Internal Server\n * Error', etc.\n */\n\n\n/**\n * This describes the expected format of a FormHelperRequest JSON response\n *\n * @typedef {Object} FormHelperResponse\n * @namespace FormHelperResponse\n *\n * @property {String} status Custom status code for the request. Form Helper\n * will try to make visible any elements within the form having a class matching\n * the pattern <code>js-fh-status-{status}</code>. Optionally maps to a\n * {@link FormRule.StatusHandler} for additional logic\n *\n * @property [data] Arbitrary data. Typically HTML or additional JSON data\n *\n * @property {Array.<FormHelperResponse.RequestError>} [errors] Any errors and\n * metadata for the request\n *\n * @example\n * {\n *   \"status\": \"ERROR\",\n *   \"errors\": [\n *     {\n *       \"code\": \"pw-too-short\",\n *       \"message\": \"password must be at least 8 characters\",\n *       \"params\": [\n *         \"password\",\n *         \"password-confirm\"\n *       ]\n *     },\n *     {\n *       \"code\": \"incomplete-address\",\n *       \"message\": \"missing address fields\",\n *       \"params\": [\n *         \"city\"\n *       ]\n *     }\n *   ]\n * }\n *\n * @example\n * {\n *   \"status\": \"SUCCESS\",\n *   \"data\": \"<div>Thank you!</div>\"\n * }\n */\n\n/**\n * @typedef {Object} RequestError\n * @memberOf FormHelperResponse\n *\n * @property {String} code User defined error code. Form Helper will try to make\n * visible any elements within the form having a class matching the pattern\n * <code>js-fh-error-{code}</code>\n *\n * @property {String} [message] Developer-only details and/or description of the\n * error. Not used by Form Helper\n *\n * @property {Array.String} [params] Array of request parameters, i.e. form\n * inputs, that are associated with the RequestError\n *\n * @example\n * {\n *   \"code\": \"login-failure\",\n *   \"message\": \"Email address and/or password invalid\",\n *   \"params\": [\n *     \"email-address\",\n *     \"password\",\n *     \"password-confirm\"\n *   ]\n * }\n */\n\n/**\n* @namespace formHelper\n*/\n\nimport 'jquery';\nimport 'jquery-serializejson';\n\nconst $ = jQuery;\nconst formHelper = {};\nconst rules = [];\n\n/**\n * API method for registering a FormRule. The associated form element not need\n * to exist in the DOM at this point\n * @param {FormRule} formRule [FormRule]{@link formHelper.FormRule} object\n */\nformHelper.addRule = function(formRule) {\n  rules.push(formRule);\n};\n\n/**\n * Fires when ANY form submits. Checks to see if the submitting form matches\n * any given {@link FormRule} selectors. If a match is found, [preventDefault]{@link https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault}\n * and instantiate a new {@link formHelper.FormHelperRequest}\n * @param {Event} event submit event\n *\n * @memberof formHelper\n * @inner\n */\nfunction onFormSubmit(event) {\n\n  var matchedRule = null;\n  var $form = $(this);\n\n  // Check if this form matches any of our rules\n  $(rules).each(function(index, rule) {\n    if (!matchedRule) {\n      if ($form.is(rule.form)) {\n        matchedRule = rule;\n      }\n    }\n  });\n\n  if (matchedRule) {\n\n    event.preventDefault();\n\n    // If there is an alternate onFormSubmit behaviour specified\n    // in the rule, do that instead\n    if(matchedRule.customSubmitHandler){\n      matchedRule.customSubmitHandler();\n      return;\n    }\n\n    if (matchedRule.isMultiForm) {\n      $form = $(matchedRule.form);\n    }\n\n    var RequestController = matchedRule.requestController || formHelper.FormHelperRequest;\n    new RequestController($form, matchedRule, event);\n\n  }\n}\n\n$(function() {\n  $(document).on('submit', 'form', onFormSubmit);\n});\n\n\n\n/**\n * FormHelperRequestController's methods get mixed in to FormHelperRequest.\n * FormHelperRequestController should never be instantiated - it's simply a\n * way to separate the internal FormHelper system logic from functionality\n * safe for use in [FormRule.StatusHandler]{@link FormRule.StatusHandler}\n *\n * @class\n * @memberOf formHelper\n * @private\n */\nfunction FormHelperRequestController() { throw new Error('FormHelperRequestController should not be instantiated'); }\n$.extend(FormHelperRequestController.prototype, /** @lends formHelper.FormHelperRequestController.prototype */ {\n\n  startXHR: function() {\n    if (this.cancelled) return;\n\n    if (this.rule.blankAllPasswordsOnSubmit) {\n      this.blankAllPasswordFields();\n    }\n    this.jqXHR = $.ajax(this.xhrOptions);\n  },\n\n  /**\n   * Invoke form rule's xhrBeforeSend callback. If it returns false or [cancels]{@link formHelper.FormHelperRequest#cancel},\n   * request and don't do anything with the UI. Hold off on modifying the\n   * form's state until we know we're in the clear.\n   *\n   * If not cancelled, reset UI and proceed with the request.\n   *\n   * @param  {jqXHR} jqXHR - Prepared [jQuery XMLHttpRequest object]{@link http://api.jquery.com/jQuery.ajax/#jqXHR}\n   * @param  {object} settings - jqXHR settings object\n   */\n  xhrBeforeSend: function(jqXHR, settings) {\n\n    var cancelledViaReturnFalse = this.invokeStatusHandler(this.rule.xhrBeforeSend, [jqXHR, settings]) === false;\n\n    if (!cancelledViaReturnFalse) {\n      cancelledViaReturnFalse = this.invokeStatusHandler(formHelper.always.xhrBeforeSend, [jqXHR, settings]) === false;\n    }\n\n    if (!cancelledViaReturnFalse || !this.cancelled) {\n      this.checkoutForm();\n      this.hideAllStatusMessages();\n      this.hideAllErrorMessages();\n      this.hideAllParamMessages();\n      this.clearAllErroredFields();\n      this.disableControls();\n    }\n  },\n\n  /**\n   * Sets [status]{@link formHelper.FormHelperRequest#status}, [data]{@link formHelper.FormHelperRequest#data},\n   * and [errors]{@link formHelper.FormHelperRequest#errors} properties.\n   * Invokes [xhrSuccess StatusHandler]{@link FormRule.StatusHandler}. If not\n   * [cancelled]{@link formHelper.FormHelperRequest#cancel}, [enable controls]{@link formHelper.FormHelperRequestController#enableControls}\n   * and [update UI]{@link formHelper.FormHelperRequestController#updateUI}\n   *\n   * @param  {Object} data Response payload, i.e. {@link FormHelperResponse}\n   * @param  {String} textStatus jQuery request status\n   * @param  {jqXHR} jqXHR - [jQuery XMLHttpRequest object]{@link http://api.jquery.com/jQuery.ajax/#jqXHR}\n   */\n  xhrSuccess: function(data, textStatus, jqXHR) {\n\n    this.status = data.status;\n    this.data   = data.data;\n    this.errors = data.errors;\n\n    this.invokeStatusHandler(this.rule.xhrSuccess,         [data, textStatus, jqXHR]);\n    this.invokeStatusHandler(formHelper.always.xhrSuccess, [data, textStatus, jqXHR]);\n\n    if (this.status) {\n      if (this.rule.status) {\n        this.invokeStatusHandler(this.rule.status[this.status]);\n      }\n      if (formHelper.always.status) {\n        this.invokeStatusHandler(formHelper.always.status[this.status]);\n      }\n    }\n\n    if (this.cancelled) return;\n\n    if (this.rule.releaseFormAndUpdateUIOnXHRSuccess) {\n      this.releaseForm();\n      this.updateUI();\n    }\n\n    this.invokeStatusHandler(this.rule.onComplete);\n    this.invokeStatusHandler(formHelper.always.onComplete);\n\n  },\n\n  /**\n   * [Releases form]{@link formHelper.FormHelperRequestController#releaseForm}\n   * and invoke [xhrError StatusHandler]{@link FormRule.StatusHandler}\n\n   * @param  {jqXHR} jqXHR - [jQuery XMLHttpRequest object]{@link http://api.jquery.com/jQuery.ajax/#jqXHR}\n   * @param  {String} textStatus jQuery request status\n   * @param  {String} errorThrown HTTP status â€“ 'Not Found', 'Internal Server Error', etc.\n   */\n  xhrError: function(jqXHR, textStatus, errorThrown) {\n    this.releaseForm();\n    this.invokeStatusHandler(this.rule.xhrError,         [jqXHR, textStatus, errorThrown]);\n    this.invokeStatusHandler(formHelper.always.xhrError, [jqXHR, textStatus, errorThrown]);\n  },\n\n  /**\n   * Invoke [xhrComplete StatusHandler]{@link FormRule.StatusHandler}\n   *\n   * @param  {jqXHR} jqXHR - [jQuery XMLHttpRequest object]{@link http://api.jquery.com/jQuery.ajax/#jqXHR}\n   * @param  {String} textStatus jQuery request status\n   */\n  xhrComplete: function(jqXHR, textStatus) {\n    this.invokeStatusHandler(this.rule.xhrComplete,         [jqXHR, textStatus]);\n    this.invokeStatusHandler(formHelper.always.xhrComplete, [jqXHR, textStatus]);\n  },\n\n  /**\n   * Invoke given StatusHandler (if any) with supplied args\n   *\n   * @param  {FormRule.StatusHandler} [statusHandler] StatusHandler to invoke\n   * @param  {array} [args] The callback's arguments\n   */\n  invokeStatusHandler: function(statusHandler, args) {\n    if (this.cancelled) return;\n\n    if (statusHandler) {\n      switch (typeof statusHandler) {\n        case 'string':\n          this.redirect(statusHandler);\n          break;\n        case 'function':\n          return statusHandler.apply(this, args || []);\n        default:\n          break;\n      }\n    }\n  },\n\n\n  /**\n   * Marks the form element as being 'checked out' by applying\n   * [FH_FORM_SUBMITTING]{@link formHelper.Classes.FH_FORM_SUBMITTING} class.\n   * A checked out form will cancel any additional FormHelperRequests on the\n   * form until [released]{@link formHelper.FormHelperRequestController#releaseForm}\n   */\n  checkoutForm: function() {\n    this.$form.addClass(formHelper.Classes.FH_FORM_SUBMITTING);\n  },\n\n  /**\n   * Removes [FH_FORM_SUBMITTING]{@link formHelper.Classes.FH_FORM_SUBMITTING}\n   * class from the form and [enables controls]{@link formHelper.FormHelperRequestController#enableControls}\n   */\n  releaseForm: function() {\n    this.enableControls();\n    this.$form.removeClass(formHelper.Classes.FH_FORM_SUBMITTING);\n  },\n\n  /**\n   * Determine if the form is 'checked out' by a FormHelperRequest instance by\n   * testing for the presence of [FH_FORM_SUBMITTING]{@link formHelper.Classes.FH_FORM_SUBMITTING}\n   * class on the form element\n   * @return {Boolean}\n   */\n  isFormCheckedOut: function() {\n    return this.$form.hasClass(formHelper.Classes.FH_FORM_SUBMITTING);\n  },\n\n  /**\n   * Calls [getErrorMessages]{@link formHelper.FormHelperRequestController#getErrorMessages},\n   * [getParamMessages]{@link formHelper.FormHelperRequestController#getParamMessages},\n   * [getStatusMessage]{@link formHelper.FormHelperRequestController#getStatusMessage},\n   * and [getErroredControls]{@link formHelper.FormHelperRequestController#getErroredControls}.\n   * Uses the return values to determine if any UI has been updated, and if\n   * so, scrolls the form into view\n   */\n  updateUI: function() {\n\n    var errors  = this.errors;\n    var classes = formHelper.Classes;\n    var ctx     = this;\n    var $win;\n    var winScrollTop;\n    var viewportHeight;\n    var formOffset;\n    var formHeight;\n    var scrollTopTarget;\n\n    var errorMessages = this.getErrorMessages();\n    var paramMessages = this.getParamMessages();\n    var statusMessage = this.getStatusMessage();\n    var erroredFields = this.getErroredControls();\n\n    if (this.rule.scrollIntoViewOnUIUpdate) {\n\n      if (errorMessages.length || paramMessages.length || statusMessage.length || erroredFields.length) {\n        // UI has been updated\n\n        $win           = $(window);\n        formOffset     = this.$form.offset();\n        winScrollTop   = $win.scrollTop();\n        viewportHeight = $win.innerHeight();\n        formHeight     = this.$form.outerHeight();\n\n        // If the form is NOT completely in view\n        if (!(formOffset.top > winScrollTop && formOffset.top + formHeight < winScrollTop + viewportHeight)) {\n          if (formOffset.top < winScrollTop) {\n            scrollTopTarget = formOffset.top;\n          } else {\n            if (formHeight > viewportHeight) {\n              scrollTopTarget = formOffset.top;\n            } else {\n              scrollTopTarget = formOffset.top + formHeight - viewportHeight;\n            }\n          }\n        }\n\n        if (scrollTopTarget !== undefined) {\n          $('html, body').animate({scrollTop: scrollTopTarget + 'px'});\n        }\n\n      }\n    }\n  },\n\n  /**\n   * Given any [RequestError]{@link FormHelperResponse.RequestError} codes,\n   * find, show, and mark [FH_MARKED_ERROR_MESSAGE]{@link formHelper.Classes.FH_MARKED_ERROR_MESSAGE}\n   * all associated error message elements\n   *\n   * @return {jQuery} All shown error messages\n   */\n  getErrorMessages: function() {\n    var Classes    = formHelper.Classes;\n    var ErrorCodes = formHelper.ErrorCodes;\n    var errors     = this.errors;\n    var selectors  = [];\n    var objects    = $();\n\n    if (errors && errors.length) {\n\n      selectors.push('.' + Classes.ERROR_MESSAGE_PREFIX + ErrorCodes.ANY_ERROR);\n\n      $(errors).each(function(index, error) {\n        if (error.code) {\n          selectors.push('.' + Classes.ERROR_MESSAGE_PREFIX + error.code);\n        }\n      });\n    }\n\n    if (selectors.length) {\n      objects = objects.add( this.find(selectors.join(',')).addClass(Classes.FH_MARKED_ERROR_MESSAGE).show() );\n    }\n    return objects;\n  },\n\n  /**\n   * Given any [RequestError]{@link FormHelperResponse.RequestError} params,\n   * find and show all associated param messages\n   *\n   * @return {jQuery} All modified param messages\n   */\n  getParamMessages: function() {\n    var Classes    = formHelper.Classes;\n    var errors     = this.errors;\n    var selectors  = [];\n    var objects    = $();\n\n    if (errors && errors.length) {\n      $(errors).each(function(index, error) {\n        if (error.params) {\n          $(error.params).each(function(index, param) {\n            selectors.push('.' + Classes.PARAM_MESSAGE_PREFIX + param);\n          });\n        }\n      });\n    }\n\n    if (selectors.length) {\n      objects = objects.add( this.find(selectors.join(',')).addClass(Classes.FH_MARKED_PARAM_MESSAGE).show() );\n    }\n    return objects;\n  },\n\n  /**\n   * Find and show the status message element, if it exists, for the given\n   * [RequestError]{@link FormHelperResponse.RequestError} status\n   *\n   * @return {jQuery} Shown status message\n   */\n  getStatusMessage: function() {\n    var Classes = formHelper.Classes;\n    if (this.status) {\n      return this.find('.' + Classes.STATUS_MESSAGE_PREFIX + this.status.toLowerCase()).addClass(Classes.FH_MARKED_STATUS_MESSAGE).show();\n    } else {\n      return $();\n    }\n  },\n\n  /**\n   * Given any [RequestError]{@link FormHelperResponse.RequestError} params,\n   * find all associated control and apply [CONTROL_GROUP_ERROR]{@link formHelper.Classes.CONTROL_GROUP_ERROR}\n   * to their control group\n   *\n   * @return {jQuery} All controls for error params\n   */\n  getErroredControls: function() {\n    var Classes   = formHelper.Classes;\n    var errors    = this.errors;\n    var controls  = $();\n    var ctx       = this;\n    var control;\n\n    if (errors && errors.length) {\n      $(errors).each(function(index, error) {\n        if (error.params) {\n          $(error.params).each(function(index, param) {\n\n            control = ctx.control(param);\n\n            if (control.length) {\n              controls = controls.add(control);\n\n              ctx.controlGroup(control).addClass(Classes.CONTROL_GROUP_ERROR + ' ' + Classes.FH_MARKED_CONTROL_GROUP);\n            }\n          });\n        }\n      });\n    }\n\n    if (this.rule.focusFirstErroredControl) {\n      if (controls.length) {\n        control = controls[0];\n\n        // IE8 jank - can't focus an input that was just enabled.\n        window.setTimeout(function() {\n          control.focus();\n          if (control.select) {\n            control.select();\n          }\n        }, 0);\n\n      }\n    }\n\n    return controls;\n  },\n\n  /**\n   * Removes all occurrances of [CONTROL_GROUP_ERROR]{@link formHelper.Classes.CONTROL_GROUP_ERROR}\n   * from [FH_MARKED_CONTROL_GROUP]{@link formHelper.Classes.FH_MARKED_CONTROL_GROUP}\n   * elements\n   */\n  clearAllErroredFields: function() {\n    var Classes = formHelper.Classes;\n    this.find('.' + Classes.FH_MARKED_CONTROL_GROUP).removeClass(Classes.CONTROL_GROUP_ERROR + ' ' + Classes.FH_MARKED_CONTROL_GROUP);\n  },\n\n  /**\n   * Hides any elements marked [FH_MARKED_ERROR_MESSAGE]{@link formHelper.Classes.FH_MARKED_ERROR_MESSAGE}\n   * and removes marker\n   */\n  hideAllErrorMessages: function() {\n    var Classes = formHelper.Classes;\n    this.find('.' + Classes.FH_MARKED_ERROR_MESSAGE).hide().removeClass(Classes.FH_MARKED_ERROR_MESSAGE);\n  },\n\n  /**\n   * Hides any elements marked [FH_MARKED_PARAM_MESSAGE]{@link formHelper.Classes.FH_MARKED_PARAM_MESSAGE}\n   * and removes marker\n   */\n  hideAllParamMessages: function() {\n    var Classes = formHelper.Classes;\n    this.find('.' + Classes.FH_MARKED_PARAM_MESSAGE).hide().removeClass(Classes.FH_MARKED_PARAM_MESSAGE);\n  },\n\n  /**\n   * Hides any elements marked [FH_MARKED_STATUS_MESSAGE]{@link formHelper.Classes.FH_MARKED_STATUS_MESSAGE}\n   * and removes marker\n   */\n  hideAllStatusMessages: function() {\n    var Classes = formHelper.Classes;\n    this.find('.' + Classes.FH_MARKED_STATUS_MESSAGE).hide().removeClass(Classes.FH_MARKED_STATUS_MESSAGE);\n  },\n\n  /**\n   * Sets 'disabled' attribute and applies [FH_DISABLED_CONTROL]{@link formHelper.Classes.FH_DISABLED_CONTROL}\n   * class to all controls within the form\n   *\n   * @todo 99.9% sure this doesn't work in all browsers. Will probably need to\n   * beef this up by adding disabled classes and registering a handler on form\n   * change that simply prevents default until enabled.\n   */\n  disableControls: function() {\n    if (this.rule.disableControls) {\n      this.find('input, select, textarea, button').not(':disabled').attr('disabled', 'disabled').addClass(formHelper.Classes.FH_DISABLED_CONTROL);\n    }\n  },\n\n  /**\n   * Removes 'disabled' attribute and [FH_DISABLED_CONTROL]{@link formHelper.Classes.FH_DISABLED_CONTROL}\n   * class from all inputs within the form\n   */\n  enableControls: function() {\n    var Classes = formHelper.Classes;\n    if (this.rule.disableControls) {\n      this.find('.' + Classes.FH_DISABLED_CONTROL).removeAttr('disabled').removeClass(Classes.FH_DISABLED_CONTROL);\n    }\n  }\n\n});\n\n\n/**\n * FormHelperRequest instances are created automatically by FormHelper when\n * form matching any [registered FormRule]{@link formHelper.addRule}\n * submits. FormHelperRequest is not typically instantiated directly by the\n * user.<br><br>\n *\n * The FormRule's callbacks are executed in the context of the\n * FormHelperRequest instance, so members listed below are available during\n * any XHR callbacks and {@link FormRule.StatusHandler}<br>\n *\n * @class\n * @param {HTMLFormElement} formEl Form element to be handled\n * @param {FormRule} rule The form's [FormRule]{@link formHelper.FormRule}\n * @param {Event} submitEvent The form's original submit event\n * @mixes formHelper.FormHelperRequestController\n * @memberOf formHelper\n */\n\n\nfunction FormHelperRequest(formEl, rule, submitEvent) {\n  if (!formEl) return;\n  this.initialize(formEl, rule, submitEvent);\n}\nFormHelperRequest.prototype = FormHelperRequestController.prototype;\nformHelper.FormHelperRequest = FormHelperRequest;\n\n\n\n\n\n$.extend(formHelper.FormHelperRequest.prototype, /** @lends formHelper.FormHelperRequest.prototype */ {\n\n  initialize: function(formEl, rule, submitEvent) {\n    /**\n     * jQuery-wrapped form element for the request\n     * @type {jQuery}\n     */\n    this.$form = $(formEl);\n\n    if (this.isFormCheckedOut()) return;\n\n    /**\n     * The FormRule for this request. Your custom rules merged with the defaults\n     * @type {FormRule}\n     */\n    this.rule = $.extend(true, {}, formHelper.FormHelperRequest.Defaults.rule, rule);\n\n    /**\n     * The form's submit event\n     * @type {Event}\n     */\n    this.submitEvent = submitEvent;\n    this.cancelled   = false;\n\n    /**\n     * {@link FormHelperResponse} status code. Only available after [xhrSuccess]{@link formHelper.FormHelperRequestController#xhrSuccess}\n     * @type {String}\n     */\n    this.status = null;\n\n    /**\n     * {@link FormHelperResponse} data, if any was supplied. Only available after [xhrSuccess]{@link formHelper.FormHelperRequestController#xhrSuccess}\n     */\n    this.data = null;\n\n    /**\n     * Array of {@link FormHelperResponse.RequestError} objects, if any. Only available after [xhrSuccess]{@link formHelper.FormHelperRequestController#xhrSuccess}\n     * @type {Array}\n     */\n    this.errors = null;\n\n\n    // Deep copy so rule.xhrOptions.data will be sent along.\n    var xhrOptions = $.extend(true, {}, formHelper.FormHelperRequest.Defaults.xhrOptions, rule.xhrOptions || {}, {\n      context:    this,\n      url:        this.rule.action || this.$form.attr('action'),\n      data:       $.extend({}, rule.data || {}, this.$form.serializeJSON()),\n      beforeSend: this.xhrBeforeSend,\n      success:    this.xhrSuccess,\n      complete:   this.xhrComplete,\n      error:      this.xhrError\n    });\n\n    /**\n     * Object used to create [jQuery Ajax request]{@link http://api.jquery.com/jQuery.ajax/#jQuery-ajax-settings}.\n     * Hang on to this mostly for its 'data' property, which is an object with\n     * key value pairs of the form input names and their values. After this\n     * property is set, it's no longer necessary to query the DOM to read user\n     * input values\n     *\n     * @example\n     * {\n     *   url:      \"/h/module/loginForm\",\n     *   type:     \"POST\",\n     *   dataType: \"json\",\n     *   cache:    false,\n     *   data: {\n     *     // user input values\n     *     firstname: \"Billy\",\n     *     lastname:  \"White\",\n     *     email:     \"billy@lynch2.com\"\n     *   },\n     *   ...\n     * }\n     *\n     * @type {object}\n     */\n    this.xhrOptions = xhrOptions;\n\n    this.invokeStatusHandler(rule.xhrReady,              [xhrOptions]);\n    this.invokeStatusHandler(formHelper.always.xhrReady, [xhrOptions]);\n\n    if (this.cancelled) return;\n\n    this.startXHR();\n  },\n\n  /**\n   * Cancels any further processing of the FormHelperRequest. Can be called\n   * during a rule's [xhrReady]{@link FormRule.xhrReady} or [xhrBeforeSend]{@link formHelper.FormHelperRequestController#xhrBeforeSend}\n   * callbacks to prevent FormHelper UI updates and XHR\n   */\n  cancel: function() {\n    this.cancelled = true;\n  },\n\n  /**\n   * [Cancels]{@link formHelper.FormHelperRequest#cancel} the request and forwards the browser to the given location\n   * @param {String} location - URL/path to go to\n   */\n  redirect: function(location) {\n    this.cancel();\n    window.location.href = location;\n  },\n\n  /**\n   * Scroll the page so the top of the form is at the top of the window\n   */\n  scrollToTopOfForm: function() {\n    $('html, body').animate({scrollTop: this.$form.offset().top + 'px'});\n  },\n\n  /**\n   * Clear the value of every password input field in the form\n   */\n  blankAllPasswordFields: function() {\n    this.find('input[type=password]').each(function(index, input) {\n      $(input).val('');\n    });\n  },\n\n  /**\n   * Shortcut for finding elements scoped within the form\n   * @param  {String} selector CSS Selector String\n   * @return {jQuery}\n   */\n  find: function(selector) {\n    return this.$form.find(selector);\n  },\n\n  /**\n   * Find the control element for given name or id\n   * @param  {String} control - Control name or id\n   * @return {jQuery}\n   */\n  control: function(control) {\n    var $el = this.find('[name=' + control + ']');\n    if (!$el.length) {\n      $el = this.find('#' + control);\n    }\n    return $el.first();\n  },\n\n  /**\n   * Find and return a jQuery-wrapped control group for a given control\n   * @param  {String|jQuery} control - Control name or id string, or\n   * jQuery-wrapped control element\n   * @return {jQuery}\n   */\n  controlGroup: function(control) {\n    return ((typeof control === 'string') ? this.control(control) : control).closest('.' + formHelper.Classes.CONTROL_GROUP);\n  }\n\n});\n\n/** @namespace  */\nformHelper.Classes = {\n  /**\n   * Class denoting a 'control group', i.e. the container for an input and\n   * label pair\n   * @default\n   */\n  CONTROL_GROUP :            'form-group',\n\n  /**\n   * Class applied to CONTROL_GROUP in the event of an error\n   * @default\n   */\n  CONTROL_GROUP_ERROR :      'has-error',\n\n  /**\n   * Class prefix denoting a pre-loaded hidden error message\n   * @example\n   * <div class=\"js-fh-error-bad-password\" style=\"display: none;\">Invalid password. Please try again.</div>\n   * @default\n   */\n  ERROR_MESSAGE_PREFIX :     'js-fh-error-',\n\n  /**\n   * Class prefix denoting a pre-loaded hidden message for returned params\n   * @example\n   * <div class=\"js-fh-param-error-first-name\" style=\"display: none;\">First Name</div>\n   * @default\n   */\n  PARAM_MESSAGE_PREFIX :     'js-fh-param-error-',\n\n  /**\n   * Class prefix denoting a pre-loaded hidden message for returned status\n   * code\n   * @example\n   * <div class=\"js-fh-status-success\" style=\"display: none;\">Thank You!</div>\n   * @default\n   */\n  STATUS_MESSAGE_PREFIX :    'js-fh-status-',\n\n  /**\n   * Class applied to [$form]{@link formHelper.FormHelperRequest#$form} while\n   * submitting\n   * @default\n   */\n  FH_FORM_SUBMITTING :       'js-fh-submitting',\n\n  /**\n   * Class applied to made-visible error messages\n   * @default\n   */\n  FH_MARKED_ERROR_MESSAGE :  'js-fh-marked-error-msg',\n\n  /**\n   * Class applied to made-visible param error messages\n   * @default\n   */\n  FH_MARKED_PARAM_MESSAGE :  'js-fh-marked-param-msg',\n\n  /**\n   * Class applied to made-visible status messages\n   * @default\n   */\n  FH_MARKED_STATUS_MESSAGE : 'js-fh-marked-status-msg',\n\n  /**\n   * Class applied to error-marked control groups\n   * @default\n   */\n  FH_MARKED_CONTROL_GROUP :  'js-fh-marked-control-group',\n\n  /**\n   * Class applied to made-disabled control groups while submitting\n   * @default\n   */\n  FH_DISABLED_CONTROL :      'js-fh-disabled-control'\n};\n\n/** @namespace  */\nformHelper.ErrorCodes = {\n  /**\n   * Special error code that will be made visible if there is at least on\n   * error in the response\n   * @example\n   * <div class=\"js-fh-error-any-error\" style=\"display: none;\">Oops, something went wrong!</div>\n   * @default\n   */\n  ANY_ERROR : 'any-error'\n};\n\n/**\n* <p>A place to declare site-wide XHR callbacks and StatusHandlers. These\n* callbacks, if present, are invoked immediately after (and independant of) a\n* FormRule's local counterpart.</p>\n* <p>Note that even though these are registered\n* 'globally', they are still executed within the context of the working\n* FormHelperRequest.</p>\n*\n* @example\n* formHelper.always.xhrSuccess = function() {\n*   if (this.status !== 'SUCCESS') {\n*     // A form submission was not successful!\n*     // Track an event perhaps?\n*   }\n* };\n* @example\n* formHelper.always = {\n*   xhrError: function() {\n*     // XHR error - what to do?\n*   },\n*   status: {\n*     WEBSITE_BROKEN: '/' // Redirect home\n*   }\n* };\n* @namespace\n* @property {FormRule.xhrReady} [xhrReady]\n* @property {FormRule.xhrBeforeSend} [xhrBeforeSend]\n* @property {FormRule.xhrSuccess} [xhrSuccess]\n* @property {FormRule.xhrError} [xhrError]\n* @property {FormRule.xhrComplete} [xhrComplete]\n* @property {FormRule.onComplete} [onComplete]\n* @property {Object.<String, FormRule.StatusHandler>} [status]\n*/\nformHelper.always = {\n  xhrReady:      null,\n  xhrBeforeSend: null,\n  xhrSuccess:    null,\n  xhrError:      null,\n  xhrComplete:   null,\n  onComplete:    null,\n  status:        {}\n};\n\n/**\n * @namespace\n * @memberOf formHelper.FormHelperRequest\n*/\nformHelper.FormHelperRequest.Defaults = {\n\n  /**\n   * @namespace\n   * @description Either change these globaly for a site by modifying these\n   * properties or on a form-by-form basis by specifying alternate values in\n   * a form rule.\n  */\n  rule: {\n    /** @default */\n    disableControls: true,\n    /** @default */\n    scrollIntoViewOnUIUpdate: true,\n    /** @default */\n    focusFirstErroredControl: true,\n    /** @default */\n    releaseFormAndUpdateUIOnXHRSuccess: true\n  },\n\n  /**\n   * @namespace\n   * @description Yeah, don't change these...\n  */\n  xhrOptions: {\n    /** @default */\n    cache:    false,\n    /** @default */\n    dataType: 'json',\n    /** @default */\n    type:     'POST'\n  }\n};\n\n\nexport default formHelper;"],"names":["$","jQuery","formHelper","rules","addRule","formRule","push","onFormSubmit","event","matchedRule","$form","each","index","rule","is","form","preventDefault","customSubmitHandler","isMultiForm","RequestController","requestController","FormHelperRequest","document","on","FormHelperRequestController","Error","extend","prototype","cancelled","blankAllPasswordsOnSubmit","blankAllPasswordFields","jqXHR","ajax","xhrOptions","settings","cancelledViaReturnFalse","invokeStatusHandler","xhrBeforeSend","always","checkoutForm","hideAllStatusMessages","hideAllErrorMessages","hideAllParamMessages","clearAllErroredFields","disableControls","data","textStatus","status","errors","xhrSuccess","releaseFormAndUpdateUIOnXHRSuccess","releaseForm","updateUI","onComplete","errorThrown","xhrError","xhrComplete","statusHandler","args","redirect","apply","addClass","Classes","FH_FORM_SUBMITTING","enableControls","removeClass","hasClass","classes","ctx","$win","winScrollTop","viewportHeight","formOffset","formHeight","scrollTopTarget","errorMessages","getErrorMessages","paramMessages","getParamMessages","statusMessage","getStatusMessage","erroredFields","getErroredControls","scrollIntoViewOnUIUpdate","length","window","offset","scrollTop","innerHeight","outerHeight","top","undefined","animate","ErrorCodes","selectors","objects","ERROR_MESSAGE_PREFIX","ANY_ERROR","error","code","add","find","join","FH_MARKED_ERROR_MESSAGE","show","params","param","PARAM_MESSAGE_PREFIX","FH_MARKED_PARAM_MESSAGE","STATUS_MESSAGE_PREFIX","toLowerCase","FH_MARKED_STATUS_MESSAGE","controls","control","controlGroup","CONTROL_GROUP_ERROR","FH_MARKED_CONTROL_GROUP","focusFirstErroredControl","setTimeout","focus","select","hide","not","attr","FH_DISABLED_CONTROL","removeAttr","formEl","submitEvent","initialize","isFormCheckedOut","Defaults","action","serializeJSON","xhrReady","startXHR","location","cancel","href","input","val","selector","$el","first","closest","CONTROL_GROUP"],"mappings":"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"}